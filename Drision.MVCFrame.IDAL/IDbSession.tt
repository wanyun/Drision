<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>  
<#@ output extension=".cs" #>

<# 
	CodeGenerationTools code = new CodeGenerationTools(this);
	MetadataLoader loader = new MetadataLoader(this);
	CodeRegion region = new CodeRegion(this, 1);
	MetadataTools ef = new MetadataTools(this);
	string inputFile = this.Host.ResolvePath(@"..\\Drision.MVCFrame.Model\\DataModel.edmx");
	EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
	string namespaceName = code.VsNamespaceSuggestion();
	EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.Objects;

namespace Drision.MVCFrame.IDAL
{
    public interface IDbSession
    {

    //----T4模板生成--- 每个表对应的实体仓储对象
<#
//使用foreach循环遍历ItemCollection.GetItems<EntityType>集合
foreach(EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e=>e.Name))
{ #>
	I<#=entity.Name#>Repository  <#=entity.Name#>Repository { get; }

<#}#>

        //将当前应用程序跟数据库的会话内所有实体的变化更新会数据库
        int SaveChanges();

        //执行Sql语句的方法
        //EF4.0的写法
        int ExcuteSql(string strSql, ObjectParameter[] parameters);

        //EF5.0的写法
        //int ExcuteSql(string strSql, DbParameter[] parameters);

    }

}