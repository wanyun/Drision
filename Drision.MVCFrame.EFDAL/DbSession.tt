<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>  
<#@ output extension=".cs" #>

<# 
	CodeGenerationTools code = new CodeGenerationTools(this);
	MetadataLoader loader = new MetadataLoader(this);
	CodeRegion region = new CodeRegion(this, 1);
	MetadataTools ef = new MetadataTools(this);
	string inputFile = this.Host.ResolvePath(@"..\\Drision.MVCFrame.Model\\DataModel.edmx");
	EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
	string namespaceName = code.VsNamespaceSuggestion();
	EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Drision.MVCFrame.IDAL;
using System.Data.Objects;

namespace Drision.MVCFrame.EFDAL
{

    //代表应用程序跟数据库之间的一次会话，也是数据库访问层的统一入口
    public class DbSession : IDbSession 
    {

    //----T4模板生成--- 每个表对应的实体仓储对象
<#
//使用foreach循环遍历ItemCollection.GetItems<EntityType>集合
foreach(EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e=>e.Name))
{ #>

		public I<#=entity.Name#>Repository  <#=entity.Name#>Repository
        {
            get 
            {
                return new <#=entity.Name#>Repository(); 
            }
        }

<#}#>

        //代表：当前应用程序跟数据库的会话内所有的实体的变化，更新会数据库
        public int SaveChanges()
        {
            //调用EF上下文的SaveChanges方法
            return EFContextFactory.GetCurrentDbContext().SaveChanges();
        }

        //执行Sql脚本的方法
        public int ExcuteSql(string strSql, ObjectParameter[] parameters)
        {

            //Ef4.0的执行方法 ObjectContext
            //封装一个执行SQl脚本的代码
            return EFContextFactory.GetCurrentDbContext().ExecuteFunction(strSql, parameters);

            //throw new NotImplementedException();

        }

    }

}
